import adsk.core, adsk.fusion, adsk.cam, traceback

# Global list to maintain handlers
handlers = []

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface
        
        # Create the command definition
        cmdDef = ui.commandDefinitions.itemById('CopyToPointsCmd')
        if not cmdDef:
            cmdDef = ui.commandDefinitions.addButtonDefinition('CopyToPointsCmd',
                    'Copy to Points',
                    'Copy a component to multiple points with a selection dialog',
                    './resources')  # Assuming resources folder for icons; adjust if needed

        # Connect to the command created event
        onCommandCreated = CopyToPointsCommandCreatedHandler()
        cmdDef.commandCreated.add(onCommandCreated)
        handlers.append(onCommandCreated)

        # Execute the command
        cmdDef.execute()

        # Keep the script running until the command completes
        adsk.autoTerminate(False)
        
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))

def stop(context):
    try:
        # Clean up handlers
        for h in handlers:
            pass
        adsk.autoTerminate(True)
    except:
        pass

class CopyToPointsCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:
            cmd = args.command
            inputs = cmd.commandInputs
            
            # Add selection input for the component
            compInput = inputs.addSelectionInput('component', 'Component', 'Select the component to copy')
            compInput.addSelectionFilter('Occurrences')
            compInput.setSelectionLimits(1, 1)
            compInput.tooltip = 'Select one component occurrence to copy.'

            # Add selection input for the origin point on the component
            originInput = inputs.addSelectionInput('originPoint', 'Origin Point', 'Select the origin point on the component')
            originInput.addSelectionFilter('SketchPoints')
            originInput.addSelectionFilter('Vertices')
            originInput.setSelectionLimits(1, 1)
            originInput.tooltip = 'Select a point (vertex or sketch point) on the component that will align to each target point.'

            # Add selection input for target points (multiple allowed)
            targetInput = inputs.addSelectionInput('targetPoints', 'Target Points', 'Select target points for placement')
            targetInput.addSelectionFilter('SketchPoints')
            targetInput.addSelectionFilter('ConstructionPoints')
            targetInput.addSelectionFilter('Vertices')
            targetInput.setSelectionLimits(1, 100)  # Up to 100 targets; adjust as needed
            targetInput.tooltip = 'Select one or more target points. Use Ctrl/Cmd to multi-select.'

            # Connect to the execute event
            onExecute = CopyToPointsCommandExecuteHandler()
            cmd.execute.add(onExecute)
            handlers.append(onExecute)

            # Connect to the destroy event to clean up
            onDestroy = CopyToPointsCommandDestroyHandler()
            cmd.destroy.add(onDestroy)
            handlers.append(onDestroy)

        except:
            adsk.core.Application.get().userInterface.messageBox('Failed to create command inputs:\n{}'.format(traceback.format_exc()))

class CopyToPointsCommandExecuteHandler(adsk.core.CommandEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:
            app = adsk.core.Application.get()
            ui = app.userInterface
            design = adsk.fusion.Design.cast(app.activeProduct)
            rootComp = design.rootComponent

            # Get the command inputs
            cmdInputs = args.command.commandInputs
            compSel = cmdInputs.itemById('component')
            originSel = cmdInputs.itemById('originPoint')
            targetSel = cmdInputs.itemById('targetPoints')

            if compSel.selectionCount != 1:
                ui.messageBox('Please select exactly one component.')
                return

            if originSel.selectionCount != 1:
                ui.messageBox('Please select exactly one origin point.')
                return

            if targetSel.selectionCount < 1:
                ui.messageBox('Please select at least one target point.')
                return

            # Get the selected entities
            component = compSel.selection(0).entity  # This is an Occurrence
            originPoint = originSel.selection(0).entity
            targetPoints = [targetSel.selection(i).entity for i in range(targetSel.selectionCount)]

            # Get 3D positions
            originPos = originPoint.worldGeometry if hasattr(originPoint, 'worldGeometry') else originPoint.geometry
            if not isinstance(originPos, adsk.core.Point3D):
                ui.messageBox('Invalid origin point geometry.')
                return

            # Create copies and place them
            for i, targetPoint in enumerate(targetPoints):
                targetPos = targetPoint.worldGeometry if hasattr(targetPoint, 'worldGeometry') else targetPoint.geometry
                if not isinstance(targetPos, adsk.core.Point3D):
                    ui.messageBox(f'Invalid target point {i+1} geometry.')
                    continue

                # Create a translation matrix
                transform = adsk.core.Matrix3D.create()
                
                # Calculate translation: target - origin
                delta = targetPos.asVector()
                delta.subtract(originPos.asVector())
                transform.translation = delta

                # Create a copy of the component
                # newOccurrence = rootComp.occurrences.addNewComponentCopy(component.component, transform)
                newOccurrence = rootComp.occurrences.addExistingComponent(component.component, transform)
                if newOccurrence:
                    ui.messageBox(f'Copied component {i+1}/{len(targetPoints)} placed at target point.')
                else:
                    ui.messageBox(f'Failed to create copy {i+1}.')

            ui.messageBox('All components copied and placed successfully!')

        except:
            ui = adsk.core.Application.get().userInterface
            ui.messageBox('Command execution failed:\n{}'.format(traceback.format_exc()))

class CopyToPointsCommandDestroyHandler(adsk.core.CommandEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        # Clean up the command
        try:
            pass
        except:
            pass